(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{447:function(s,t,a){s.exports=a.p+"assets/img/travis.33934c8c.png"},448:function(s,t,a){s.exports=a.p+"assets/img/fail.2e4891e7.png"},502:function(s,t,a){"use strict";a.r(t);var n=a(8),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"travis自动化部署vuepress到github-pages"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#travis自动化部署vuepress到github-pages"}},[s._v("#")]),s._v(" Travis自动化部署VuePress到Github Pages")]),s._v(" "),n("blockquote",[n("p",[s._v("本文旨在帮助你用vuepress构建自己的博客或者文档，然后让它运行在免费的Github Pages上面，并且通过Travis这个集成工具来在你每次git push代码的时候自动部署。这样你每次push完等一会儿就可以在线上看到刚刚写好的文档啦！体验还是很不错的～😎")])]),s._v(" "),n("h2",{attrs:{id:"第一步：vuepress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一步：vuepress"}},[s._v("#")]),s._v(" 第一步：Vuepress")]),s._v(" "),n("p",[s._v("首先你需要参考"),n("a",{attrs:{href:"https://vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("vuepress"),n("OutboundLink")],1),s._v("的官网文档，写一个vuepress的项目。注意，如果你选择官网文档快速上手部分写的第一种方式（全局安装体验）的话，那么你需要在你的新项目中写一个"),n("code",[s._v("package.json")]),s._v("，并执行以下几步：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将 VuePress 作为一个本地依赖安装")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -D vuepress "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者：npm install -D vuepress")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建一个 docs 文件夹")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" docs\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建一个 markdown 文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'# Hello VuePress!'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" docs/README.md\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开始写作")]),s._v("\nnpx vuepress dev docs\n")])])]),n("p",[s._v("然后你的"),n("code",[s._v("package.json")]),s._v("里的"),n("code",[s._v("scripts")]),s._v("应该是这样的：")]),s._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"docs:dev"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress dev docs"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"docs:build"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress build docs"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("然后通过"),n("code",[s._v("npm run docs:dev")]),s._v("和"),n("code",[s._v("npm run docs:build")]),s._v("来在本地运行和构建。具体怎么在vuepress中配置markdown文档，导航菜单什么的，官方文档很详细了，甚至还可以自己开发布局，样式和交互。这里就不赘述了。我准备有空的时候用vuetify去写一个material的vuepress主题。到时候开源出来大家用。不过其实默认主题也还可以啦。")]),s._v(" "),n("p",[s._v("值得一提的是，默认没有favicon（就是浏览器窗口的那个小图标）和PWA支持，你需要在config.js里面配置"),n("code",[s._v("serviceWorker: true")]),s._v("来开启PWA，另外注意一下"),n("code",[s._v("base")]),s._v("字段的配置：")]),s._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("module"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\ttitle"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'🌻社长的社畜'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\tdescription"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'前端技术博客'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\tbase"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置站点根路径")]),s._v("\n\tthemeConfig"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tsidebar"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\tsidebarDepth"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\thead"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'link'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" rel"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'icon'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/icon.ico'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'link'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" rel"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'apple-touch-icon'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/apple-touch-icon.png'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\tserviceWorker"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("h2",{attrs:{id:"第二步：github-pages"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二步：github-pages"}},[s._v("#")]),s._v(" 第二步：GitHub Pages")]),s._v(" "),n("p",[s._v("GitHub Pages可以让你用"),n("code",[s._v("https://<用户名>.github.io")]),s._v("这个域名来部署你刚刚在本地跑起来的vuepress文档。（当然也可以用）"),n("code",[s._v("https://<用户名>.github.io/<仓库名>")]),s._v("。这里跟上面配置里的"),n("code",[s._v("base")]),s._v("字段有关，第一种就用"),n("code",[s._v("'/'")]),s._v("就好了，第二种要用你的仓库名。如果你想将你的网站部署到 "),n("code",[s._v("https://foo.github.io/bar/")]),s._v("，那么"),n("code",[s._v("base")]),s._v("应该被设置成"),n("code",[s._v('"/bar/"')]),s._v("，它的值应当总是以斜杠开始，并以斜杠结束。")]),s._v(" "),n("p",[s._v("用第一种方式的话，你的github仓库名必须叫做："),n("code",[s._v("<用户名>.github.io")]),s._v("，如果用第二种域名的话，就随意就好。先别急着push本地的代码上去。现在，在项目的根目录新建一个deploy.sh文件。")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env sh")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 确保脚本抛出遇到的错误")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -e\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成静态文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run docs:build\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入生成的文件夹")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" docs/.vuepress/dist\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果是发布到自定义域名")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 'www.example.com' > CNAME")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -A\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'deploy'")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io，去掉下面这一行的注释")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#git push -f https://${token}@github.com/<USERNAME>/<USERNAME>.github.io.git master")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io/<REPO>，去掉下面这一行的注释")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git push -f https://${token}@github.com:<USERNAME>/<REPO>.git master:gh-pages")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" -\n")])])]),n("h2",{attrs:{id:"第三步：travis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三步：travis"}},[s._v("#")]),s._v(" 第三步：Travis")]),s._v(" "),n("p",[s._v("最后一步，我们要用"),n("a",{attrs:{href:"https://travis-ci.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("travis"),n("OutboundLink")],1),s._v("来部署我们的项目，简单来说，它会检测你的github仓库的变化，发现你push了新的代码上去，它就会自动执行刚才"),n("code",[s._v("deploy.sh")]),s._v("里的代码，然后部署你的项目上线。你可以注册登陆，并根据指示关联你的GitHub仓库，一切都默认就好，关联好了之后，由于travis没有权限操作GitHub，所以你需要去"),n("a",{attrs:{href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub设置"),n("OutboundLink")],1),s._v("里面生成一个你的Personal access tokens，这里会让你给你的token起一个名字，注意到上面"),n("code",[s._v("deploy.sh")]),s._v("里面的这一行了吗：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -f https://"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${token}")]),s._v("@github.com/"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("USERNAME"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("USERNAME"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(".github.io.git master\n")])])]),n("p",[s._v("这里面这个"),n("code",[s._v("${token}")]),s._v("的名字就是那个，然后新建token的时候下面的勾记得全都要勾上，默认都是没有选的。然后就会生成token，记得马上复制它，然后去到travis里面，应该可以看到你的github仓库名字，点进去，选择旁边的设置，然后下面有一个Environment Variables，配置好你刚才复制的token就可以了，注意name是你刚刚起的token名字，然后Add就可以了：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(447),alt:"An image"}}),s._v("\n然后，你需要在命令行运行：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" update-index --add --chmod"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("+x deploy.sh\n")])])]),n("p",[s._v("要不然你的travis后台会报错，（没权限）。"),n("code",[s._v(".travis.yml")]),s._v("配置:")]),s._v(" "),n("div",{staticClass:"language-yml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yml"}},[n("code",[s._v("\t"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("language")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" node_js\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("node_js")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8.15.1"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("before_install")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" chmod +x deploy.sh\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("directories")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node_modules"')]),s._v("\n  \n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("branches")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("only")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" master\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" ./deploy.sh\n\n  \n")])])]),n("p",[n("img",{attrs:{src:a(448),alt:"An image"}})]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("最后再push你的代码就可以了，travis就会自动执行部署了。这里注意要强制push，以为它编译之后的仓库跟你本地的不一样了，直接"),n("code",[s._v("git push")]),s._v("是不行的，每次强制push就好了：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin master --force\n")])])]),n("p",[s._v("等travis后台完成之后，就可以在你的域名上面看到你的文档咯！🎉")])])}),[],!1,null,null,null);t.default=e.exports}}]);